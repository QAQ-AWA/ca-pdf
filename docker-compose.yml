version: "3.9"

services:
  traefik:
    image: traefik:v3.1
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.le.acme.email=${TRAEFIK_ACME_EMAIL:-dev@example.com}
      - --certificatesresolvers.le.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.le.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.le.acme.caserver=${TRAEFIK_ACME_CA_SERVER:-https://acme-staging-v02.api.letsencrypt.org/directory}
      - --log.level=${TRAEFIK_LOG_LEVEL:-INFO}
      - --ping=true
      - --ping.entrypoint=web
    ports:
      - "${TRAEFIK_HTTP_PORT:-80}:80"
      - "${TRAEFIK_HTTPS_PORT:-443}:443"
    volumes:
      - traefik_letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - edge
    labels:
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  db:
    image: postgres:16
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
      POSTGRES_USER: ${POSTGRES_USER:-app_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app_password}
    ports:
      - "${POSTGRES_HOST_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      args:
        COMMIT_SHA: ${COMMIT_SHA:-local}
        BUILD_VERSION: ${BUILD_VERSION:-dev}
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
      - .env.docker
    networks:
      - internal
      - edge
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend-web.rule=Host(`${BACKEND_DOMAIN:-api.localtest.me}`)
      - traefik.http.routers.backend-web.entrypoints=web
      - traefik.http.routers.backend-web.middlewares=redirect-to-https@docker
      - traefik.http.routers.backend.rule=Host(`${BACKEND_DOMAIN:-api.localtest.me}`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=le
      - traefik.http.services.backend.loadbalancer.server.port=8000

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        COMMIT_SHA: ${COMMIT_SHA:-local}
        BUILD_VERSION: ${BUILD_VERSION:-dev}
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-https://api.localtest.me}
        VITE_APP_NAME: ${VITE_APP_NAME:-Monorepo UI}
        VITE_PUBLIC_BASE_URL: ${VITE_PUBLIC_BASE_URL:-https://app.localtest.me}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - edge
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend-web.rule=Host(`${FRONTEND_DOMAIN:-app.localtest.me}`)
      - traefik.http.routers.frontend-web.entrypoints=web
      - traefik.http.routers.frontend-web.middlewares=redirect-to-https@docker
      - traefik.http.routers.frontend.rule=Host(`${FRONTEND_DOMAIN:-app.localtest.me}`)
      - traefik.http.routers.frontend.entrypoints=websecure
      - traefik.http.routers.frontend.tls.certresolver=le
      - traefik.http.services.frontend.loadbalancer.server.port=8080

networks:
  internal:
    driver: bridge
  edge:
    driver: bridge

volumes:
  postgres_data:
  traefik_letsencrypt:
