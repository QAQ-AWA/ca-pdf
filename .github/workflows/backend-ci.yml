name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "Makefile"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    paths:
      - "backend/**"
      - "Makefile"
      - ".github/workflows/backend-ci.yml"
  workflow_dispatch:

jobs:
  lint-test:
    name: Lint, test, and check migrations
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: backend
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      APP_NAME: "Monorepo API"
      DATABASE_URL: "postgresql+asyncpg://postgres:postgres@127.0.0.1:5432/backend"
      SECRET_KEY: "test-secret-key"
      ACCESS_TOKEN_EXPIRE_MINUTES: "2"
      REFRESH_TOKEN_EXPIRE_MINUTES: "10"
      BACKEND_CORS_ORIGINS: '["http://testclient"]'
      AUTH_RATE_LIMIT_REQUESTS: "5"
      AUTH_RATE_LIMIT_WINDOW_SECONDS: "60"
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_PASSWORD: "AdminPass123!"
      ADMIN_ROLE: "admin"
      ENCRYPTED_STORAGE_ALGORITHM: "fernet"
      ENCRYPTED_STORAGE_MASTER_KEY: "L9oZbBY7bRHt9aCJloPAV9ooa-QKdfYU0uf5KIKGJ28="
      POETRY_VIRTUALENVS_IN_PROJECT: "true"
      POETRY_NO_INTERACTION: "1"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry (official)
        shell: bash
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"
          "$HOME/.local/bin/poetry" --version

      - name: Verify Poetry installation
        shell: bash
        run: |
          echo "PATH=$PATH"
          if ! command -v poetry >/dev/null 2>&1; then
            echo "Poetry CLI not found on PATH" >&2
            exit 1
          fi
          which poetry
          poetry --version

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            backend/.venv
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install backend dependencies
        working-directory: backend
        run: poetry install --no-interaction --no-ansi

      - name: Run formatters (black & isort)
        working-directory: backend
        run: |
          poetry run black --check app tests
          poetry run isort --check-only app tests

      - name: Run type checks
        working-directory: backend
        run: poetry run mypy app

      - name: Wait for database
        run: |
          for attempt in {1..20}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              echo "Database is ready"
              exit 0
            fi
            echo "Database is not ready yet. Waiting..."
            sleep 3
          done
          echo "Database did not become ready in time." >&2
          exit 1
        env:
          PGPASSWORD: postgres

      - name: Run Alembic migrations
        working-directory: backend
        run: poetry run alembic upgrade head

      - name: Run backend test suite
        working-directory: backend
        run: poetry run pytest -q --cov=app --cov-report=xml --cov-report=term

      - name: Upload backend coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ github.sha }}
          path: backend/coverage.xml
          if-no-files-found: warn
