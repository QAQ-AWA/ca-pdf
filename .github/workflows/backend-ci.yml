name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - "Makefile"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    paths:
      - "backend/**"
      - "Makefile"
      - ".github/workflows/backend-ci.yml"
  workflow_dispatch:

jobs:
  lint-test:
    name: Lint, test, and check migrations
    runs-on: ubuntu-latest
    env:
      APP_NAME: "Monorepo API"
      DATABASE_URL: "sqlite+aiosqlite:///./test_app.db"
      SECRET_KEY: "test-secret-key"
      ACCESS_TOKEN_EXPIRE_MINUTES: "2"
      REFRESH_TOKEN_EXPIRE_MINUTES: "10"
      BACKEND_CORS_ORIGINS: '["http://testclient"]'
      AUTH_RATE_LIMIT_REQUESTS: "5"
      AUTH_RATE_LIMIT_WINDOW_SECONDS: "60"
      ADMIN_EMAIL: "admin@example.com"
      ADMIN_PASSWORD: "AdminPass123!"
      ADMIN_ROLE: "admin"
      ENCRYPTED_STORAGE_ALGORITHM: "fernet"
      ENCRYPTED_STORAGE_MASTER_KEY: "L9oZbBY7bRHt9aCJloPAV9ooa-QKdfYU0uf5KIKGJ28="
      POETRY_VIRTUALENVS_CREATE: "false"
      POETRY_NO_INTERACTION: "1"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "poetry"
          cache-dependency-path: backend/poetry.lock

      - name: Install Poetry
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          echo "$HOME/.local/bin" >> $GITHUB_PATH || true

      - name: Show Poetry version
        working-directory: backend
        run: poetry --version

      - name: Install backend dependencies
        working-directory: backend
        run: python -m poetry install --no-interaction --no-root

      - name: Run formatters (black & isort)
        working-directory: backend
        run: |
          python -m poetry run black --check app tests
          python -m poetry run isort --check-only app tests

      - name: Run Alembic migration check
        working-directory: backend
        run: python -m poetry run alembic check

      - name: Run backend test suite with coverage
        working-directory: backend
        run: python -m poetry run pytest --cov=app --cov-report=xml --cov-report=term

      - name: Upload backend coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ github.sha }}
          path: backend/coverage.xml
          if-no-files-found: warn
